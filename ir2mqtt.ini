[DEFAULT]

[global]
# Generates additional debug output. All MQTT and serial communication will be 
# logged. Comment out or set to yes/True to enable
debug = yes

# Serial communication port(s) to send data to. Comment out to disable serial
# communication
serial = COM3
;,COM5

# Uncomment to start the application using a data dump file from irsdk for 
# testing/development purposes. The dump file can be created by issuing the 
# command 'irsdk --dump data.dmp'
simulate = data/limerock-q.dmp

[mqtt]
# Hostname of a MQTT broker to connect to. Comment out to disable MQTT 
# communication.
host = localhost

# TCP port on which a MQTT broker is listening. Default is 1883.
port = 1883

# MQTT topic prefix to use when publishing values - see section [iracing]
baseTopic = /sensors/iRacing

# Timezone used to publish the simulations TimeOfDay
timezone=CET

[iracing]
# Mapping of irsdk values to MQTT topics.
# Format: mqttTopic = irsdkField
# The configuration key (mqtt topic is prepended by the baseTopic configuration 
# value). So a configuration line
#
# eventType = WeekendInfo/EventType
#
# will post the EventType value from the iRacing WeekendInfo data structure on
# the MQTT topic '/sensors/iRacing/eventType'
#
# For accessing list structures (e.g. Sessions in SessionInfo) you have to use 
# array notation:
#
# sessionType = SessionInfo/Sessions[0]/SessionType
#
# You can use 'last' as a special index value to retrieve the last element from
# the list. 
#
# Furthermore, you may use an other telemetry value as list index. Simply 
# prefix that value with a hast mark '#':
#
# sessionType = SessionInfo/Sessions[#SessionNum]/SessionType
#
# If a structured telemetry value is needed as list index, use '&' as separator:
#
# radio = RadioInfo/Radios[0]/Frequencies[#RadioInfo&Radios[0]&TunedToFrequencyNum]/FrequencyName
#
# LIMITATION: A double list index indirection like
#
# radio = RadioInfo/Radios[#RadioInfo&SelectedRadioNum]/Frequencies[#RadioInfo&Radios[#RadioInfo&SelectedRadioNum]&TunedToFrequencyNum]/FrequencyName
#
# DOES NOT WORK. 
#
# As alternative, use an already specified MQTT topic prefixed by '$' as 
# indirection value:
#
# currentradio = RadioInfo/Radios[#RadioInfo&SelectedRadioNum]/RadioNum
# radio = RadioInfo/Radios[$currentRadio]/Frequencies[#RadioInfo&Radios[$currentRadio]&TunedToFrequencyNum]/FrequencyName

eventType = WeekendInfo/EventType
practiceTrackState = SessionInfo/Sessions[#SessionNum]/SessionTrackRubberState
currentSessionType = SessionInfo/Sessions[#SessionNum]/SessionType
ingarage = IsInGarage
onpitroad = OnPitRoad
currentradio = RadioInfo/Radios[#RadioInfo&SelectedRadioNum]/RadioNum
radio = RadioInfo/Radios[$currentradio]/Frequencies[#RadioInfo&Radios[$currentradio]&TunedToFrequencyNum]/FrequencyName

[serial]
# Mapping of irsdk values to serial telegrams
# Format: telegramType = irsdkField
# The resulting telegram sent over serial connection then has the Form
# '#telegramType=irsdkField*'
#
# For specifying the irsdkvale to be sent see section [iracing]

PFL = PitSvFlags
PFU = PitSvFuel
RTX = RadioInfo/Radios[$currentradio]/Frequencies[#RadioInfo&Radios[$currentradio]&TunedToFrequencyNum]/FrequencyName

